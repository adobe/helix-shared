/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A redirect specification take take the form of either a URL of a spreadsheet with rewrite rules or a rewrite rule as `from`, `to` pairs.
 */
export type Redirect = RewritesExcelSpreadsheet | RewritesGoogleSpreadsheet | RedirectRule;
/**
 * A link to an Excel spreadsheet hosted on Sharepoint, shared with `helix@adobe.com` that has at least two columns. The first column, titled ‟from” contains the rewrite source path, the second column, titled ‟to” specifies the rewrite target path.
 */
export type RewritesExcelSpreadsheet = string;
/**
 * A link to a Google spreadsheet, shared with `helix@adobe.com` that has at least two columns. The first column, titled ‟from” contains the rewrite source path, the second column, titled ‟to” specifies the rewrite target path.
 */
export type RewritesGoogleSpreadsheet = string;
/**
 * The source representation to be used by the indexer to extract values
 */
export type Source = "html" | "markdown";

export interface RedirectsConfiguration {
  /**
   * The redirect-config file format version
   */
  version?: "1" | 1;
  redirects?: Redirect[];
  vanity?: VanityURLExtractor;
  [k: string]: unknown;
}
/**
 * A strain is a combination of code and content that enables the creation of a digital experience. Strains can be used to create language variants of websites, A/B tests, personalization, or to aggregate content from multiple sources
 */
export interface RedirectRule {
  /**
   * A URL path or regular expression to match the path of a URL. It can contain capture groups that can be used in `to`.
   */
  from?: string;
  /**
   * A replacement string that replaces matched URLs found in `from`.
   */
  to?: string;
  /**
   * What kind of redirect is this?
   */
  type?: "permanent" | "temporary" | "internal";
}
/**
 * Configure one or multiple vanity URL extractors, each extractor is a property of this object
 */
export interface VanityURLExtractor {
  [k: string]: VanityURLMapping;
}
export interface VanityURLMapping {
  source?: Source;
  /**
   * The source document to retrieve values from. Known variables in the URI Template are: `repo`, `ref`, `owner`, `path`
   */
  fetch?: string;
  /**
   * A CSS selector expression that selects nodes in the HTML (DOM) or Markdown (MDAST) syntax tree
   */
  select?: string;
  /**
   * A ES6 template literal expression that extracts the value from the matching node(s) to be stored in the index
   */
  value?: string;
  [k: string]: unknown;
}
