/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The source representation to be used by the indexer to extract values
 */
export type Source = "html" | "markdown";
export type Property = SingleValueProperty | MultiValueProperty;

export interface IndexConfiguration {
  indices?: {
    [k: string]: Index;
  };
  [k: string]: unknown;
}
export interface Index {
  source?: Source;
  /**
   * The source document to retrieve values from. Known variables in the URI Template are: `repo`, `ref`, `owner`, `path`
   */
  fetch?: string;
  /**
   * The data sink to store the extracted data in. This can be an Excel or Google spreadsheet, an Azure Index or Algolia index
   */
  target?: string;
  properties: Properties;
  queries?: Queries;
  [k: string]: unknown;
}
/**
 * The properties to add to the index
 */
export interface Properties {
  [k: string]: Property;
}
/**
 * The property in an index. The value will be stored as a single cardinal value.
 */
export interface SingleValueProperty {
  /**
   * A CSS selector expression that selects nodes in the HTML (DOM) or Markdown (MDAST) syntax tree
   */
  select: string;
  /**
   * A ES6 template literal expression that extracts the value from the matching node(s) to be stored in the index
   */
  value: string;
  /**
   * Whether to enable faceted search on this property
   */
  faceted?: boolean;
}
/**
 * The property in an index. The value will be stored as a list of values
 */
export interface MultiValueProperty {
  /**
   * A CSS selector expression that selects nodes in the HTML (DOM) or Markdown (MDAST) syntax tree
   */
  select: string;
  /**
   * A ES6 template literal expression that extracts the values from the matching nodes to be stored in the index
   */
  values: string;
  /**
   * Whether to enable faceted search on this property
   */
  faceted?: boolean;
}
/**
 * Named queries that can be executed against this index
 */
export interface Queries {
  [k: string]: Query;
}
/**
 * A named query that can be run against an index
 */
export interface Query {
  /**
   * The base query to run. If the value is an object or array, use [QBL JSON or YAML notation](https://github.com/adobe/helix-querybuilder#as-json-or-yaml)
   */
  query?:
    | string
    | {
        [k: string]: unknown;
      }
    | unknown[];
  /**
   * How many hits each page of search results should contain
   */
  hitsPerPage?: number;
  /**
   * How long (in seconds) search results should be cached on the CDN
   */
  cache?: number;
  /**
   * Which URL parameters to accept in the query when served on the web
   */
  parameters?: string[];
  /**
   * An ES6 template expression that determines which filters to apply
   */
  filters?: string;
  [k: string]: unknown;
}
