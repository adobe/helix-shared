/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Strains = [ProxyStrain | RuntimeStrain, ...(ProxyStrain | RuntimeStrain)[]];
/**
 * A version number string
 */
export type ServiceVersion = string;

/**
 * A Configuration File for Project Helix.
 */
export interface Configuration {
  /**
   * A container for referencable objects that can be re-used elsewhere in the configuration.
   */
  definitions?: {
    [k: string]: unknown;
  };
  /**
   * The helix-config file format version
   */
  version?: "1" | 1;
  strains: Strains;
  /**
   * The URL of a preflight check that should be performed before assigning a strain to a request. The headers returned by this preflight request can be used in strain conditions.
   */
  preflight?: string;
}
/**
 * A strain is a combination of code and content that enables the creation of a digital experience. Strains can be used to create language variants of websites, A/B tests, personalization, or to aggregate content from multiple sources
 */
export interface ProxyStrain {
  /**
   * Name of the strain
   */
  name: string;
  /**
   * Origin backend for proxy strains.
   */
  origin: string | Origin;
  /**
   * Sticky strains are not re-evaluated on every request. As soon as a visitor is determined to match a sticky strain, a session cookie will be set to keep the user in the strain.
   */
  sticky?: boolean;
  /**
   * URL condition.
   *
   * **Warning**: this property has been deprecated in favour of adding the `url` to the `condition` property.
   */
  url?: string;
  /**
   * List of known URLs for testing this strain
   */
  urls?: string[];
  /**
   * VLC condition that controls that can optionally activate this strain.
   */
  condition?: string | Conditions;
  perf?: Performance;
  "version-lock"?: VersionLock;
  /**
   * A list (using globbing language) of accepted URL parameters. Note: every parameter is a potential cache killer.
   */
  params?: string[];
  /**
   * The redirect rules that should be applied to this strain
   */
  redirects?: RedirectRule[];
}
/**
 * Representation of a origin host for a proxy strain.
 */
export interface Origin {
  /**
   * The hostname of the backend.
   */
  hostname?: string;
  /**
   * The port number.
   */
  port?: number;
  error_threshold?: number;
  /**
   * How long to wait for the first bytes in milliseconds.
   */
  first_byte_timeout?: number;
  /**
   * Weight used to load balance this backend against others.
   */
  weight?: number;
  /**
   * An hostname, IPv4, or IPv6 address for the backend.
   */
  address?: string;
  /**
   * How long to wait for a timeout in milliseconds.
   */
  connect_timeout?: string;
  /**
   * The name of the backend.
   */
  name?: string;
  /**
   * How long to wait between bytes in milliseconds.
   */
  between_bytes_timeout?: number;
  /**
   * The shield POP designated to reduce inbound load on this origin by serving the cached data to the rest of the network.
   */
  shield?: string;
  /**
   * Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
   */
  ssl_cert_hostname?: string;
  /**
   * Maximum number of connections.
   */
  max_conn?: number;
  /**
   * Whether or not to use SSL to reach the backend.
   */
  use_ssl?: boolean;
  /**
   * The base path to make requests again. For example, if your `origin` is `http://www.example.com/foo` and a request is made to your site using the URL `/bar`, a backend request to `http://www.example.com/foo/bar` will be made.
   */
  path?: string;
  /**
   * The hostname to override the [Host header](https://docs.fastly.com/guides/basic-configuration/specifying-an-override-host).
   * By default, proxy strains use the `Host` header that was used to make the request to Helix's CDN, which is ideal for migration use cases where the existing backend expects to serve traffic to a hostname that has now been taken over by Helix. In cases where Helix is aggregating content from multiple hosts, and the backend won't serve any content to the domain name Helix is using, set the `override_host` property to an accepted `Host` header value.
   */
  override_host?: string;
}
/**
 * A condition expression
 */
export interface Conditions {
  /**
   * All conditions in this list must be met
   */
  and?: Conditions[];
  /**
   * Any conditions in this list must be met
   */
  or?: Conditions[];
  not?: Conditions;
}
/**
 * Performance testing details.
 */
export interface Performance {
  /**
   * Testing device
   */
  device?:
    | ""
    | "MotorolaMotoG4"
    | "iPhone5"
    | "iPhone6"
    | "iPhone6Plus"
    | "iPhone7"
    | "iPhone8"
    | "Nexus5X"
    | "Nexus6P"
    | "GalaxyS5"
    | "iPad"
    | "iPadPro";
  /**
   * Testing location
   */
  location?:
    | ""
    | "NorthVirginia"
    | "Frankfurt"
    | "Sydney"
    | "Ohio"
    | "California"
    | "Oregon"
    | "Canada"
    | "Ireland"
    | "Tokyo"
    | "Seoul"
    | "Singapore"
    | "Mumbai"
    | "SaoPaulo"
    | "London";
  /**
   * Testing connection
   */
  connection?:
    | ""
    | "regular2G"
    | "good2G"
    | "slow3G"
    | "regular3G"
    | "good3G"
    | "emergingMarkets"
    | "regular4G"
    | "LTE"
    | "dsl"
    | "wifi"
    | "cable";
  /**
   * Lighthouse SEO Score
   */
  "lighthouse-seo-score"?: number;
  /**
   * Lighthouse Best Practices Score
   */
  "lighthouse-best-practices-score"?: number;
  /**
   * Lighthouse Accessibility Score
   */
  "lighthouse-accessibility-score"?: number;
  /**
   * Lighthouse Performance Score
   */
  "lighthouse-performance-score"?: number;
  /**
   * Lighthouse Progressive Web App Score
   */
  "lighthouse-pwa-score"?: number;
  /**
   * JS Parse & Compile
   */
  "js-parse-compile"?: number;
  /**
   * DOM Element Count
   */
  "dom-size"?: number;
  /**
   * 85% Visually Complete
   */
  visually_complete_85?: number;
  /**
   * Visually Complete
   */
  visually_complete?: number;
  /**
   * Time to Interactive
   */
  "consistently-interactive"?: number;
  /**
   * First CPU Idle
   */
  "first-interactive"?: number;
  /**
   * Time to First Byte
   */
  "time-to-first-byte"?: number;
  /**
   * Estimated input latency
   */
  "estimated-input-latency"?: number;
  /**
   * Speed Index
   */
  speed_index?: number;
  /**
   * First Meaningful Paint
   */
  "first-meaningful-paint"?: number;
  /**
   * First Contentful Paint
   */
  "first-contentful-paint"?: number;
  /**
   * First Paint
   */
  firstRender?: number;
  /**
   * Total Image size in bytes
   */
  image_body_size_in_bytes?: number;
  /**
   * Total Image transferred
   */
  image_size_in_bytes?: number;
  /**
   * Total Webfont size in bytes
   */
  font_body_size_in_bytes?: number;
  /**
   * Total Webfont transferred
   */
  font_size_in_bytes?: number;
  /**
   * Total JavaScript size in bytes
   */
  js_body_size_in_bytes?: number;
  /**
   * Total JavaScript Transferred
   */
  js_size_in_bytes?: number;
  /**
   * Total CSS size in bytes
   */
  css_body_size_in_bytes?: number;
  /**
   * Total CSS transferred
   */
  css_size_in_bytes?: number;
  /**
   * Total HTML size in bytes
   */
  html_body_size_in_bytes?: number;
  /**
   * Total HTML transferred
   */
  html_size_in_bytes?: number;
  /**
   * Response time
   */
  page_wait_timing?: number;
  /**
   * Total Page transferred
   */
  page_size_in_bytes?: number;
  /**
   * Total Page size in bytes
   */
  page_body_size_in_bytes?: number;
  /**
   * Number of requests
   */
  asset_count?: number;
  /**
   * onLoad
   */
  onload?: number;
  /**
   * onContentLoad
   */
  oncontentload?: number;
}
export interface VersionLock {
  [k: string]: ServiceVersion;
}
/**
 * A strain is a combination of code and content that enables the creation of a digital experience. Strains can be used to create language variants of websites, A/B tests, personalization, or to aggregate content from multiple sources
 */
export interface RedirectRule {
  /**
   * A URL path or regular expression to match the path of a URL. It can contain capture groups that can be used in `to`.
   */
  from?: string;
  /**
   * A replacement string that replaces matched URLs found in `from`.
   */
  to?: string;
  /**
   * What kind of redirect is this?
   */
  type?: "permanent" | "temporary" | "internal";
}
/**
 * A runtime strain is a combination of code and content that enables the creation of a digital experience.
 */
export interface RuntimeStrain {
  /**
   * Name of the strain
   */
  name: string;
  /**
   * Pointer to the code repository
   */
  code: string | GitURL;
  /**
   * Pointer to the content repository
   */
  content: string | GitURL;
  /**
   * Pointer to the repository for static resources
   */
  static: string | GitURL1;
  /**
   * Name of the resource to use for requests to directories (no extension).
   * When a request is made by the browser to `/help` and `directoryIndex=README.html`, then the request will be treated as if it was made to `/help/README.html`. Slashes (`/`) are not allowed in the directory index.
   */
  directoryIndex?: string;
  /**
   * Sticky strains are not re-evaluated on every request. As soon as a visitor is determined to match a sticky strain, a session cookie will be set to keep the user in the strain.
   */
  sticky?: boolean;
  package?: string | string | string;
  /**
   * URL condition.
   *
   * **Warning**: this property has been deprecated in favour of adding the `url` to the `condition` property.
   */
  url?: string;
  /**
   * List of known URLs for testing this strain
   */
  urls?: string[];
  /**
   * VLC condition that controls that can optionally activate this strain.
   */
  condition?: string | Conditions;
  perf?: Performance;
  "version-lock"?: VersionLock;
  /**
   * A list (using globbing language) of accepted URL parameters. Note: every parameter is a potential cache killer.
   */
  params?: string[];
  /**
   * The redirect rules that should be applied to this strain
   */
  redirects?: RedirectRule[];
}
/**
 * Representation of the fragments of a Git URL
 */
export interface GitURL {
  /**
   * The protocol to access the Git repository
   */
  protocol?: "https" | "http" | "ssh";
  /**
   * The hostname without port
   */
  hostname?: string;
  /**
   * The hostname with port
   */
  host?: string;
  /**
   * The port to access the Git Repository
   */
  port?: number | string;
  /**
   * The owner or username that the repository belongs to
   */
  owner: string;
  /**
   * The path within the repository
   */
  path?: string;
  /**
   * The repository name
   */
  repo: string;
  /**
   * The branch, tag, or sha of the tree in the repository to use
   */
  ref: string;
}
/**
 * Representation of the fragments of a Git URL
 */
export interface GitURL1 {
  /**
   * The protocol to access the Git repository
   */
  protocol?: "https" | "http" | "ssh";
  /**
   * The hostname without port
   */
  hostname?: string;
  /**
   * The hostname with port
   */
  host?: string;
  /**
   * The port to access the Git Repository
   */
  port?: number | string;
  /**
   * The owner or username that the repository belongs to
   */
  owner: string;
  /**
   * The path within the repository
   */
  path?: string;
  /**
   * The repository name
   */
  repo: string;
  /**
   * The branch, tag, or sha of the tree in the repository to use
   */
  ref: string;
  /**
   * List of white listed paths
   */
  allow?: string[];
  /**
   * List of white listed paths
   */
  deny?: string[];
  /**
   * Deprecated: Enable server-side asset processing.
   */
  magic?: boolean;
}
