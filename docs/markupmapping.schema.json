{"meta:license":["Copyright 2019 Adobe. All rights reserved.","This file is licensed to you under the Apache License, Version 2.0 (the \"License\");","you may not use this file except in compliance with the License. You may obtain a copy","of the License at http://www.apache.org/licenses/LICENSE-2.0","","Unless required by applicable law or agreed to in writing, software distributed under","the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS","OF ANY KIND, either express or implied. See the License for the specific language","governing permissions and limitations under the License."],"$id":"https://ns.adobe.com/helix/shared/markupmapping","$schema":"http://json-schema.org/draft-07/schema#","title":"Markup Mapping","type":"object","meta:status":"stabilizing","description":"A markup mapping defines how Helix should generate markup for certain Markdown or DOM patterns.\n\nA configuration consits of a mandatory `match` expression, which is a matching expression that works differently depending on the value of the `type` attribute.\n\n- If `type=html`, then `match` is a CSS selector that operates on the generated HTML\n- If `type=markdown`, then `match` is a CSS selector that operates on the source Markdown\n- If `type=url`, then `match` is a URL path expression\n- If `type=content`, then `match` is a content intelligence expression that selects sections based on the order of their children\n\nFurthermore, a configuration can have any number of actions (including none at all), for example:\n\n- `wrap`: adds more HTML elements around the generated HTML\n- `classnames` adds `class` attribute values into the generated HTML element\n- `attribute` adds other attributes and values into the generated HTML element\n\n## Examples\n\n### On the DOM tree\n\nThe most intuitive usage for most developers will be directly operating on the resulting DOM tree.\nThe `match` method just takes a regular CSS selector and then applies the desired markup on the resulting element.\n\n#### Adding a class\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: p\n    classnames:\n      - foo\n    type: html\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<p class=\"foo\">consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n#### Adding an attribute\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: p\n    attribute:\n      bar: baz\n    type: html\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<p bar=\"baz\">consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n#### Wrapping with another element\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: p\n    wrap: section.qux\n    type: html\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<section class=\"qux\">\n  <p>consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n</section>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n### On the Markdown abstract tree\n\nAs an alternative, it is also possible to directly operate on the Markdown abstract syntax tree before it is converted to HTML. This is especially useful if you are heavily modifying the markup via the `*.pre.js` and need to already annotate your tree before processing. The `match` property takes a CSS like selector, but instead of DOM elements, you are targeting [MDAST nodes](https://github.com/syntax-tree/mdast#nodes).\n\n#### Adding a class\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: paragraph\n    classnames:\n      - foo\n    type: markdown\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<p class=\"foo\">consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n#### Adding an attribute\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: paragraph\n    attribute:\n      bar: baz\n    type: markdown\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<p bar=\"baz\">consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n#### Wrapping with another element\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: paragraph\n    wrap: section.qux\n    type: markdown\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<section class=\"qux\">\n  <p>consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n</section>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n\n### Mixed\n\nFor the sake of completeness, we provide here an example of mixed rules\n\n`index.md`\n```markdown\n# Lorem ipsum dolor sit amet\n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\n\n![Lorem ipsum](http://dolor.sit/amet.jpeg)\n```\n\n`helix-markup.yaml`\n```yaml\nversion: 1\nmarkup:\n  foo:\n    match: paragraph\n    classnames:\n      - foo\n    type: markdown\n  bar:\n    match: p\n    attribute:\n      bar: baz\n    type: html\n```\n\n`index.html`\n```html\n<h1>Lorem ipsum dolor sit amet</h1>\n<p class=\"foo\" bar=\"baz\">consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n<img src=\"http://dolor.sit/amet.jpeg\" alt=\"Lorem ipsum\"/>\n```\n","required":["match"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"The (optional) name of the mapping. The name is normative only, and can be used for debugging purposes. It does not affect either matching nor the markup output."},"match":{"type":"string","anyOf":[{"type":"string","title":"DOM Match Expression","description":"A CSS selector expression selecting the DOM nodes that should get processed","examples":["p","p>img","h1+p"]},{"type":"string","title":"MDAST Match Expression","description":"A CSS selector expression selecting the Markdown nodes that should get processed","examples":["paragraph","paragraph>image","heading+paragraph"]},{"type":"string","title":"URL Pattern Match Expression","description":"An [Express-like](https://expressjs.com/en/guide/routing.html) path expression for selecting URL patterns that will apply the changes to the `body` element.","examples":["/about","/authors/:name","/posts/(\\d\\d\\d\\d)/(\\d\\d)/:title"]},{"type":"string","title":"Content Intelligence Match Expression","description":"Use a [Content Intelligence](https://github.com/adobe/helix-pipeline/blob/master/README.md#infer-content-types-with-utilstypes) expression for selecting sections in MDAST that have the specified order of children.","examples":["^heading","paragraph$","heading image+","heading? image","heading paragraph* image","(paragraph|list)","^heading (image paragraph)+$"]}]},"type":{"type":"string","enum":["html","markdown","url","content"],"default":"html","meta:enum":{"html":"Match against the generated DOM tree","markdown":"Match against the source MDAST tree","url":"Match against the request URL","content":"Use content intelligence matching for sections"}},"wrap":{"type":"string","description":"Add the following HTML tags before the generated HTML. This attribute is using [Emmet](https://emmet.io) notation.","examples":["div>ul>li","div+p+bq","div+div>p>span+em"]},"classnames":{"type":"array","description":"Add the following class names to the `class` attribute of the generated HTML","items":{"type":"string"}},"attribute":{"type":"object","description":"create new attributes for each key value pair below this property","additionalProperties":{"type":"string","description":"The property value"}}}}
