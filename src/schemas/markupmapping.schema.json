{
  "meta:license": [
    "Copyright 2019 Adobe. All rights reserved.",
    "This file is licensed to you under the Apache License, Version 2.0 (the \"License\");",
    "you may not use this file except in compliance with the License. You may obtain a copy",
    "of the License at http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "Unless required by applicable law or agreed to in writing, software distributed under",
    "the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS",
    "OF ANY KIND, either express or implied. See the License for the specific language",
    "governing permissions and limitations under the License."
  ],
  "$id": "https://ns.adobe.com/helix/shared/markupmapping",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Markup Mapping",
  "type": "object",
  "meta:status": "stabilizing",
  "description": "",
  "required": [
    "match"
  ],
  "additionalProperties": false,
  "properties": {
    "name": {
      "type": "string",
      "description": "The (optional) name of the mapping. The name is normative only, and can be used for debugging purposes. It does not affect either matching nor the markup output."
    },
    "match": {
      "type": "string",
      "anyOf": [
        {
          "type": "string",
          "title": "DOM Match Expression",
          "description": "A CSS selector expression selecting the DOM nodes that should get processed",
          "examples": [
            "p",
            "p>img",
            "h1+p"
          ]
        },
        {
          "type": "string",
          "title": "MDAST Match Expression",
          "description": "A CSS selector expression selecting the Markdown nodes that should get processed",
          "examples": [
            "paragraph",
            "paragraph>image",
            "heading+paragraph"
          ]
        },
        {
          "type": "string",
          "title": "URL Pattern Match Expression",
          "description": "An [Express-like](https://expressjs.com/en/guide/routing.html) path expression for selecting URL patterns that will apply the changes to the `body` element.",
          "examples": [
            "/about",
            "/authors/:name",
            "/posts/(\\d\\d\\d\\d)/(\\d\\d)/:title"
          ]
        },
        {
          "type": "string",
          "title": "Content Intelligence Match Expression",
          "description": "Use a [Content Intelligence](https://github.com/adobe/helix-pipeline/blob/master/README.md#infer-content-types-with-utilstypes) expression for selecting sections in MDAST that have the specified order of children.",
          "examples": [
            "^heading",
            "paragraph$",
            "heading image+",
            "heading? image",
            "heading paragraph* image",
            "(paragraph|list)",
            "^heading (image paragraph)+$"
          ]
        }
      ]
    },
    "type": {
      "type": "string",
      "enum": ["html", "markdown", "url", "content"],
      "default": "html",
      "meta:enum": {
        "html": "Match against the generated DOM tree",
        "markdown": "Match against the source MDAST tree",
        "url": "Match against the request URL",
        "content": "Use content intelligence matching for sections"
      }
    },
    "wrap": {
      "type": "string",
      "description": "Add the following HTML tags before the generated HTML. This attribute is using [Emmet](https://emmet.io) notation.",
      "examples": [
        "div>ul>li",
        "div+p+bq",
        "div+div>p>span+em"
      ]
    },
    "classnames": {
      "type": "array",
      "description": "Add the following class names to the `class` attribute of the generated HTML",
      "items": {
        "type": "string"
      }
    },
    "attribute": {
      "type": "object",
      "description": "create new attributes for each key value pair below this property",
      "additionalProperties": {
        "type": "string",
        "description": "The property value"
      }
    }
  }
}
